#version 460 core

#include "../interfaces/DebugGBufferBlock.h"
#include "GBuffer.glsl"
#include "../Colour.glsl"

layout(binding = 1, rgba16f) uniform image2D debug;

vec4 byteCountToColour(uint byteCount)
{
    if (byteCount == 0)
        return vec4(0.f);
    return mix(vec4(0.f, 1.f, 0.f, 1.f), vec4(0.76f, 0.f, 0.f, 1.f), float(byteCount) / float(GBUFFER_UINT_COUNT * UINT_SIZE));
}

layout(local_size_x = DEBUG_GBUFFER_THREAD_SIZE, local_size_y = DEBUG_GBUFFER_THREAD_SIZE, local_size_z = 1) in;
void main()
{
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    GBuffer gBuffer = pullFromStorageGBuffer(coord);
    vec4 result = cDebug.defaultValue;

    if (cDebug.id == DEBUG_GBUFFER_NORMAL)
        result.xyz = gBuffer.normal;
    if (cDebug.id == DEBUG_GBUFFER_ROUGHNESS)
        result.xyz = gBuffer.roughness.xxx;
    if (cDebug.id == DEBUG_GBUFFER_DIFFUSE)
        result.xyz = gBuffer.diffuse;
    if (cDebug.id == DEBUG_GBUFFER_SPECULAR)
        result.xyz = gBuffer.specular;
    if (cDebug.id == DEBUG_GBUFFER_EMISSIVE)
        result.xyz = gBuffer.emissive;
    if (cDebug.id == DEBUG_GBUFFER_BYTE_COUNT)
        result = byteCountToColour(gBuffer.byteCount);
    if (cDebug.id == DEBUG_GBUFFER_FUZZ_COLOUR && gBufferHasFlag(gBuffer, GBUFFER_FLAG_FUZZ_BIT) == 1)
        result.xyz = gBuffer.fuzzColour;
    if (cDebug.id == DEBUG_GBUFFER_FUZZ_ROUGHNESS && gBufferHasFlag(gBuffer, GBUFFER_FLAG_FUZZ_BIT) == 1)
        result.xyz = gBuffer.fuzzRoughness.xxx;

    if (cDebug.gammaCorrect != 0)
        result.xyz = linearToSRgb(result.xyz);

    imageStore(debug, coord, result);
}
