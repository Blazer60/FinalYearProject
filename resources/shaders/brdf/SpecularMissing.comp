#version 460 core

#include "Hammersley.glsl"
#include "../Maths.glsl"

layout(binding = 0) uniform sampler2D brdfLut;
layout(binding = 0, rg16f) writeonly uniform image1D missingLut;

vec2 integrateSpecularMissing(float roughness)
{
    const vec3 n = vec3(0.f, 0.f, 1.f);

    vec2 accumulation;

    const uint sampleCount = 1024u;
    for (uint i = 0u; i < sampleCount; ++i)
    {
        const vec2 rand = hammersley(i, sampleCount);
        const vec3 l = cosImportanceSample(rand, n);

        const float nDotl = saturate(dot(n, l));

        accumulation += texture(brdfLut, vec2(nDotl, roughness)).rg;
    }

    return accumulation / float(sampleCount);
}

layout(local_size_x = 8, local_size_y = 1, local_size_z = 1) in;
void main()
{
    const vec3 id = gl_GlobalInvocationID;
    const vec3 dispatchSize = gl_NumWorkGroups * gl_WorkGroupSize;
    const float roughness = (id.x + 0.5f) / dispatchSize.x;
    const vec2 result = integrateSpecularMissing(roughness);
    imageStore(missingLut, int(id.x), vec4(result, 0.f, 0.f));
}
