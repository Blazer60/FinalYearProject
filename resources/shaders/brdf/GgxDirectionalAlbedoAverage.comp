#version 460 core

#include "Hammersley.glsl"
#include "../Maths.glsl"

layout(binding = 0) uniform sampler2D brdfLut;
layout(binding = 0, rg16f) writeonly uniform image2D brdfAverageLut;

float integrateGgxAverage(float roughness)
{
    const vec3 n = vec3(0.f, 0.f, 1.f);

    float accumulation;

    // Todo: technically this can just go down the column/row and average the result. See if that gets about the same answer?
    const uint sampleCount = 1024u;
    for (uint i = 1u; i <= sampleCount; ++i)
    {
//        const vec2 rand = hammersley(i, sampleCount);
//        const vec3 l = cosImportanceSample(rand, n);

//        const float nDotl = saturate(dot(n, l));
        const float nDotl = float(i) / float(sampleCount);

        accumulation += texture(brdfLut, vec2(nDotl, roughness)).r * nDotl;
    }

    return 2.f * accumulation / float(sampleCount);
//    return (1.f / float(sampleCount)) * accumulation;
//    return (2.f / float(sampleCount)) * accumulation;
//    return (2.f * PI / float(sampleCount)) * accumulation;
}

layout(local_size_x = 8, local_size_y = 1, local_size_z = 1) in;
void main()
{
    const vec3 id = gl_GlobalInvocationID;
    const vec3 dispatchSize = gl_NumWorkGroups * gl_WorkGroupSize;
    const vec2 uv = vec2(1.f) - ((id.xy + vec2(0.5f)) / dispatchSize.xy);

    const float result = integrateGgxAverage(uv.x);

    imageStore(brdfAverageLut, ivec2(dispatchSize) - ivec2(1) - ivec2(id.xy), vec4(result, 0.f, 0.f, 0.f));
}
