#version 460 core

#include "Hammersley.glsl"
#include "Ggx.glsl"
#include "../Maths.glsl"

layout(binding = 0) uniform sampler2D directionalAlbedoLut;
layout(binding = 1) uniform sampler2D directionalAlbedoAverageWhite;
layout(binding = 0, r16f) writeonly uniform image2D specMissing;

float directionalAlbedoWhite(vec2 uv)
{
    vec2 result = texture(directionalAlbedoLut, uv).rg;
    return result.x + result.y;
}

// The result of this should be combined with the f0 section to yeild the correct result. @see IBL.comp.
float integrateGgxSpecularMissing(float nDotV, float roughness)
{
    const vec3 v = vec3(sqrt(1.f - nDotV * nDotV), 0.f, nDotV);
    const vec3 n = vec3(0.f, 0.f, 1.f);

    float accumulation = 0.f;

    const uint sampleCount = 1024u;
    for (uint i = 0u; i < sampleCount; ++i)
    {
        const vec2 rand = hammersley(i, sampleCount);
        const vec3 l = cosImportanceSample(rand, n);

        const float nDotL = saturate(dot(n, l));

        if (nDotL > 0.f)
        {
            const float oneMinusRspecL = 1.f - directionalAlbedoWhite(vec2(nDotL, roughness));
            accumulation += oneMinusRspecL;
        }
    }

    const float rspecV = directionalAlbedoWhite(vec2(nDotV, roughness));
    const float oneMinusRspecV = 1.f - rspecV;
    const float averageRspec = texture(directionalAlbedoAverageWhite, vec2(roughness, 0.5f)).r;
    const float oneMinusAverageRspec = 1.f - averageRspec;

    return oneMinusRspecV * averageRspec * (accumulation / float(sampleCount)) / (oneMinusAverageRspec + 0.001f);
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    const vec3 id = gl_GlobalInvocationID;
    const vec3 dispatchSize = gl_NumWorkGroups * gl_WorkGroupSize;
    const vec2 uv = vec2(1.f) - ((id.xy + vec2(0.5f)) / dispatchSize.xy);

    const float result = integrateGgxSpecularMissing(uv.x, uv.y);

    imageStore(specMissing, ivec2(dispatchSize) - ivec2(1) - ivec2(id.xy), vec4(result.x, 0.f, 0.f, 0.f));
}
